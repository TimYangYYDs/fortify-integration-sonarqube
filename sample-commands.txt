Build and deploy plugin:
- From fortify-sonarqube-plugin-master, run (update SonarQube path according to your installation directory):
  mvn clean package && copy /y fortify-sonarqube-plugin\target\fortify-sonarqube-plugin-1.0-SNAPSHOT.jar \WORK\Programs\sonarqube-5.6.3\extensions\plugins
- (Re)start SonarQube using scripts or using 'Restart Server' from the SonarQube admin pages

Enable Fortify rules:
- Go to SonarQube rules page, search for Fortify, and activate all available rules in standard Quality Profiles.
  When activating Fortify rules, you can optionally specify vulnerability filter criteria. 

Generate Fortify SonarQube token:
- Add a token definition to SSC's WEB-INF/internal/serviceContext.xml file:
	<bean id="sonarQubeToken" class="com.fortify.manager.security.ws.AuthenticationTokenSpec">
		<property name="key" value="SonarQubeToken"/>
		<property name="maxDaysToLive" value="9999" />
		<property name="actionPermitted">
			<list value-type="java.lang.String">
				<value>(GET)=/api/v\d+/projectVersions</value>
				<value>(GET)=/api/v\d+/projectVersions/\d+</value>
				<value>(GET)=/api/v\d+/projectVersions/\d+/artifacts</value>
				<value>(GET)=/api/v\d+/projectVersions/\d+/performanceIndicatorHistories</value>
				<value>(GET)=/api/v\d+/projectVersions/\d+/variableHistories</value>
				<value>(GET)=/api/v\d+/projectVersions/\d+/issues</value>
			</list>
		</property>
		<property name="terminalActions">
			<list value-type="java.lang.String">
				<value>InvalidateTokenRequest</value>
				<value>DELETE=/api/v\d+/auth/token</value>
			</list>
		</property>
	</bean>
- After (re)starting SSC, generate token using (replace SSC URL/username/password):
  fortifyclient token -gettoken SonarQubeToken -user ssc -password Admin123! -url http://localhost:1710/ssc
  
Run SonarQube analysis using sample Maven EightBall project from SCA:
- Navigate to <SCA Install>\plugins\maven
- Unzip either the binary or source Maven plugin, and build/deploy the plugin to your local Maven repository
- Navigate to the samples\EightBall directory inside the Maven plugin directory
- Run a Maven-based scan for the EightBall example (see README.txt), and upload the scan results to SSC application version
- Run the following command to perform SonarQube analysis and import vulnerabilities from SSC:
  mvn -Dsonar.fortify.ssc.url=http://localhost:1710/ssc -Dsonar.fortify.ssc.token=d323da1e-79ef-4fad-a104-c6a17ee9b82a -Dsonar.fortify.ssc.app.name=EightBall -Dsonar.fortify.ssc.version.name=1.0 sonar:sonar
  

